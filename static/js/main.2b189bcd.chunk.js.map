{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","darkMode","undefined","body","document","getElementsByTagName","this","class1","className","split","indexOf","arr","filter","item","join","setState","Fragment","onClick","handleDarkMode","onSubmit","e","preventDefault","htmlFor","type","id","placeholder","required","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OAuGeA,G,8NAjGbC,MAAQ,CAAEC,cAAUC,G,+DAElB,IAAMC,EAAOC,SAASC,qBAAqB,QAAQ,GAC7CJ,GAAYK,KAAKN,MAAMC,SACzBM,EAAS,4BAEb,GAAIN,EAAU,EAEgB,GADlBE,EAAKK,UAAUC,MAAM,KACvBC,QAAQH,KACdJ,EAAKK,WAAaD,GAEpBJ,EAAKK,WAAa,eACb,CACL,IAAIG,EAAMR,EAAKK,UAAUC,MAAM,KAC/BE,EAAMA,EAAIC,QAAO,SAACC,GAAD,MATN,YASgBA,KAC3BV,EAAKK,UAAYG,EAAIG,KAAK,KAE5BR,KAAKS,SAAS,CAAEd,e,+BAER,IAAD,OACCA,EAAaK,KAAKN,MAAlBC,SACR,OACE,kBAAC,IAAMe,SAAP,KACE,4BACER,UAAU,4BACVS,QAAS,kBAAM,EAAKC,oBAElBjB,GAAY,KACbA,GAAY,MAEf,yBAAKO,UAAU,8EACb,0BAAMA,UAAU,oCAAhB,MACA,0BAAMA,UAAU,8BAAhB,oBAEF,yBAAKA,UAAU,QACb,yBAAKA,UAAU,kCACb,yBAAKA,UAAU,oCACb,2BAAOA,UAAU,oBAAjB,WACA,wBAAIA,UAAU,sGAAd,YAIA,2BAAOA,UAAU,oBAAjB,sBAEF,0BACEA,UAAU,wBACVW,SAAU,SAACC,GACTA,EAAEC,mBAGJ,wBAAIb,UAAU,wBAAd,kBACA,2BAAOc,QAAQ,aAAad,UAAU,WAAtC,UAGA,2BACEe,KAAK,QACLC,GAAG,aACHhB,UAAU,oBACViB,YAAY,SACZC,SAAS,KAEX,2BAAOJ,QAAQ,gBAAgBd,UAAU,WAAzC,YAGA,2BACEe,KAAK,WACLC,GAAG,gBACHhB,UAAU,oBACViB,YAAY,WACZC,SAAS,KAEX,4BACElB,UAAU,oDACVe,KAAK,UAFP,WAMA,0BAAMf,UAAU,kDAAhB,0BAKJ,yBAAKA,UAAU,sCACb,8BACE,uBAAGA,UAAU,4BADf,wBAKJ,yBAAKA,UAAU,8EACb,0BAAMA,UAAU,oCAAhB,MACA,0BAAMA,UAAU,8BAAhB,wB,GA3FQmB,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF/B,SAASgC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2b189bcd.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@fortawesome/fontawesome-free/css/all.css\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { darkMode: undefined };\n  handleDarkMode() {\n    const body = document.getElementsByTagName(\"Body\")[0];\n    const darkMode = !this.state.darkMode;\n    let class1 = \"mode-transition-animation\";\n    let class2 = \"bg-dark\";\n    if (darkMode) {\n      let arr = body.className.split(\" \");\n      if (arr.indexOf(class1) == -1) {\n        body.className += class1;\n      }\n      body.className += \" \" + class2;\n    } else {\n      let arr = body.className.split(\" \");\n      arr = arr.filter((item) => item !== class2);\n      body.className = arr.join(\" \");\n    }\n    this.setState({ darkMode });\n  }\n  render() {\n    const { darkMode } = this.state;\n    return (\n      <React.Fragment>\n        <button\n          className=\"btn switch-mode mr-4 mt-4\"\n          onClick={() => this.handleDarkMode()}\n        >\n          {!darkMode && \"UI\"}\n          {darkMode && \"UX\"}\n        </button>\n        <div className=\"ml-auto d-flex flex-column justify-content-center align-items-start ux-col\">\n          <span className=\"display-1 font-weight-bold title\">UX</span>\n          <span className=\"desc font-weight-bold pl-2\">User Experience</span>\n        </div>\n        <div className=\"form\">\n          <div className=\"form-body w-100 px-3 my-5 py-5\">\n            <div className=\"form-title text-center mx-3 mb-5\">\n              <small className=\"font-weight-bold\">Awesome</small>\n              <h1 className=\"h5 pb-2 pt-3 mx-4 my-2 d-flex flex-row justify-content-center align-self-center align-items-center\">\n                G0BARBER\n              </h1>\n              {/* its not right to put 0 instead of \"O\" but its look better than \"O\" and im lazy to find a new font right now */}\n              <small className=\"font-weight-bold\">Haircuts & Shaves</small>\n            </div>\n            <form\n              className=\"form-signin mt-5 px-2\"\n              onSubmit={(e) => {\n                e.preventDefault();\n              }}\n            >\n              <h1 className=\"h6 mb-4  text-center\">Please Sign in</h1>\n              <label htmlFor=\"inputEmail\" className=\"sr-only\">\n                E-mail\n              </label>\n              <input\n                type=\"email\"\n                id=\"inputEmail\"\n                className=\"form-control mb-2\"\n                placeholder=\"E-mail\"\n                required=\"\"\n              />\n              <label htmlFor=\"inputPassword\" className=\"sr-only\">\n                Password\n              </label>\n              <input\n                type=\"password\"\n                id=\"inputPassword\"\n                className=\"form-control mb-2\"\n                placeholder=\"Password\"\n                required=\"\"\n              />\n              <button\n                className=\"btn btn-lg btn-primary btn-block font-weight-bold\"\n                type=\"submit\"\n              >\n                Sign in\n              </button>\n              <span className=\"d-flex justify-content-center mt-3 forgot-pass\">\n                I forgot my password\n              </span>\n            </form>\n          </div>\n          <div className=\"form-footer w-100 text-center py-3\">\n            <span>\n              <i className=\"fas fa-sign-in-alt pr-3\"></i> Create an account\n            </span>\n          </div>\n        </div>\n        <div className=\"mr-auto d-flex flex-column justify-content-center align-items-start ui-col\">\n          <span className=\"display-1 font-weight-bold title\">UI</span>\n          <span className=\"desc font-weight-bold pl-2\">User Interface</span>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}